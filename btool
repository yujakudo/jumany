#!/usr/bin/bash
set -e

IS_WIN=false
# if MinGW
if [ "$COMSPEC" != "" ]; then
	IS_WIN=true
fi

# Commands
PYTHON=python3
PIP=pip3
DIFF=/b/bin/diff

# For POSIX systems
PREFIX="$HOME/local"
CFLAGS="-Ofast -march=native"
LDFLAGS=
LIBS=

# Environment
JUMAN_URL=http://nlp.ist.i.kyoto-u.ac.jp/nl-resource/juman/juman-7.01.tar.bz2
DOWNLOADS=JUMAN_URL
JUMAN=juman-7.01
ARCHIVE=${JUMAN}.tar.bz2
PACKAGE=${JUMAN}
ARCHIVE_DIR=archives
PACKAGE_DIR=${PACKAGE}
PATCH_FILE=${ARCHIVE_DIR}/ext_${PACKAGE}_03.patch
DIST_NAME=${JUMAN}_ext
DIST_DIR=dist

# For Windows. (MinGW)
if $IS_WIN; then
	PREFIX=${PWD}/${DIST_DIR}/${DIST_NAME}
	CFLAGS=""
	LDFLAGS="-Wl,-Bstatic"
	LIBS="-lregex -ltre -lintl -liconv"
fi

# For Python module
PYMOD_DIR=python_module
PYPI_TEST_SITE=https://testpypi.python.org
# Get module name and version from setup.py
eval $(grep MODULE_NAME= setup.py)
eval $(grep MODULE_VERSION= setup.py)
V_VERSION="v${MODULE_VERSION}"
echo $MODULE_NAME $V_VERSION

# configure to install.
# @param dist_dir for prefix
# @param flags for CFLAGS
function build_all() {
	cd $PACKAGE_DIR
	if $IS_WIN; then
		mkdir -p $1
		rm -rf $1/*
		echo ./configure --prefix=$1 --bindir=$1 \
			LDFLAGS="${LDFLAGS}" LIBS="${LIBS}" CFLAGS="$2"
		./configure --prefix=$1 --bindir=$1 \
			LDFLAGS="${LDFLAGS}" LIBS="${LIBS}" CFLAGS="$2"
		
		make clean all install
		cd lib
		make libjuman.so
		cd ..
	else
		./configure --prefix=$1 \
			LDFLAGS="${LDFLAGS}" LIBS="${LIBS}" CFLAGS="$2"
		make clean all install
	fi
	cd ..
}

# Align distribute director for Windows
# @param prefix
function align() {
	if $IS_WIN; then
		curdir=$PWD
		cd $1
		mkdir dics
		mv share/juman/doc/manual.pdf .
		mv share/juman/*dic dics
		rm -rf share
		mv libexec/juman/* libexec
		rm -rf libexec/juman
		cp ${curdir}/scripts/jumanrc.win ./jumanrc
		cp ${curdir}/scripts/juman-i.bat .
		cd $curdir
		if [[ $1 =~ _win([0-9]+)$ ]]; then
			bit_width=${BASH_REMATCH[1]}
			cp $1/lib/libjuman.so ${PYMOD_DIR}/libjuman${bit_width}.so
		fi
	fi
}

for cmd in $*; do

if [ $cmd = "load" ]; then
	rm -rf $PACKAGE_DIR
	tar xf ${ARCHIVE_DIR}/${ARCHIVE}
	cd $PACKAGE_DIR
	patch -p1 < ../${PATCH_FILE}
	cd ..

elif [ $cmd = "build" ]; then
	build_all $PREFIX "${CFLAGS}"

elif [ $cmd = "build-w64" ]; then
	n_dist=${PREFIX}_win64
	build_all ${n_dist} "${CFLAGS} -m64 -Ofast"
	align ${n_dist}

elif [ $cmd = "build-w32" ]; then
	n_dist=${PREFIX}_win32
	build_all ${n_dist} "${CFLAGS} -m32 -Ofast"
	align ${n_dist}

# For develop
elif [ $cmd = "download" ]; then
	cd $ARCHIVE_DIR
	for download in $DOWNLOADS ; do
		if [ ! -e basename $download ]; then
			wget $download
		fi
	done
	cd ..

elif [ $cmd = "build-debug" ]; then
	n_dist=${PREFIX}_debug
	build_all ${n_dist} "${CFLAGS} -g -O0"
	align ${n_dist}

elif [ $cmd = "diff" ]; then
	diff_opt="-rupBN -x *dic -x perl -x stamp-h1 -x winconf -x jumanrc -x libtool -x .libs -x .deps -x config.* -x *.log -x *.o -x *.lo -x *.a -x *.la -x *.so -x *.exe -x Makefile"
	fromdir=/tmp/${PACKAGE_DIR}
	todir=${PACKAGE_DIR}
	$DIFF ${diff_opt} ${fromdir} ${todir} > ${PATCH_FILE}

elif [ $cmd = "clean-dist" ]; then
	rm -rf ${DIST_DIR}/*

elif [ $cmd = "pymod" ]; then
	rm -rf ${PYMOD_DIR}/dics
	cp -r ${DIST_DIR}/${DIST_NAME}_win64/dics $PYMOD_DIR
	rm -f ${DIST_DIR}/*.zip
	cp copyings/copying.pymod.txt ${PYMOD_DIR}/copying.txt
	$PYTHON setup.py sdist

elif [ $cmd = "zip" ]; then
	cp copyings/copying.exe.txt ${DIST_DIR}/${DIST_NAME}_win64/copying.txt
#	cp copyings/copying.exe.txt ${DIST_DIR}/${DIST_NAME}_win32/copying.txt
	cd ${DIST_DIR}
	zip -r ${DIST_NAME}-${MODULE_VERSION}_win64.zip ${DIST_NAME}_win64
#	zip -r ${DIST_NAME}-${MODULE_VERSION}_win32.zip ${DIST_NAME}_win32
	cd ..

elif [ $cmd = "git-push" ]; then
	git push origin master

elif [ $cmd = "git-tag" ]; then
	echo -n "Comment: "
	read comm
	git tag -a $V_VERSION -m "${comm}"
	git push origin $V_VERSION

elif [ $cmd = "pypi-test" ]; then
	$PYTHON setup.py register -r ${PYPI_TEST_SITE}/pypi
	$PYTHON setup.py sdist upload -r ${PYPI_TEST_SITE}/pypi

elif [ $cmd = "test-pip" ]; then
	$PYTHON -m twine upload --repository testpypi --skip-existing /mnt/z/jumany-0.3.zip
	$PIP install --index-url ${PYPI_TEST_SITE}/simple/ $MODULE_NAME
	$PIP test $MODULE_NAME

elif [ $cmd = "pypi-upload" ]; then
	$PYTHON setup.py register
	$PYTHON setup.py sdist upload

else
	echo "Unknown command:" $cmd
	break
fi

done
